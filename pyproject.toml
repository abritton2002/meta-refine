[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "meta-refine"
version = "1.0.0"
description = "AI-powered code intelligence tool built with Meta's Llama 3.1 - Install globally and run with 'meta'"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Meta-Refine Team", email = "team@meta-refine.dev"}
]
maintainers = [
    {name = "Meta-Refine Team", email = "team@meta-refine.dev"}
]
keywords = [
    "meta", "ai", "llama", "code-analysis", "code-review", "cli-tool",
    "security", "performance", "static-analysis", "meta-ai", "developer-tools"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    # Core AI/ML dependencies
    "torch>=2.0.0",
    "transformers>=4.35.0",
    "huggingface-hub>=0.19.0",
    "accelerate>=0.24.0",
    
    # CLI and user interface
    "typer>=0.9.0",
    "rich>=13.0.0",
    "colorama>=0.4.6",
    
    # Configuration and data handling
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pyyaml>=6.0.1",
    
    # Code analysis (basic)
    "libcst>=1.1.0",
    
    # Performance and caching
    "diskcache>=5.6.0",
    "psutil>=5.9.0",
    "tqdm>=4.66.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "watchdog>=3.0.0",
]
security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
advanced = [
    # Advanced parsing (if needed later)
    "tree-sitter>=0.20.0",
    "tree-sitter-python>=0.20.0",
    "tree-sitter-javascript>=0.20.0",
    # Distributed caching
    "redis>=5.0.0",
]
all = [
    "meta-refine[dev,security,advanced]",
]

[project.urls]
Homepage = "https://github.com/meta-refine/meta-refine"
Documentation = "https://meta-refine.readthedocs.io"
Repository = "https://github.com/meta-refine/meta-refine"
"Bug Tracker" = "https://github.com/meta-refine/meta-refine/issues"
Changelog = "https://github.com/meta-refine/meta-refine/blob/main/CHANGELOG.md"

[project.scripts]
meta = "meta_refine_pkg:app"
meta-refine = "meta_refine_pkg:app"

[tool.setuptools.packages.find]
include = ["meta_refine_pkg*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml"]

# UV configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "torch.*",
    "libcst.*",
    "diskcache.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-v",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "model: marks tests that require model loading",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["core"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linting
[tool.bandit]
targets = ["core", "meta_refine.py"]
exclude_dirs = ["tests"]
skips = ["B101", "B601"] 